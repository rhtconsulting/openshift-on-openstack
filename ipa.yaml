heat_template_version: 2014-10-16


description: >
  A host providing the DNS server for the OpenShift nodes.


parameters:

  key_name:
    type: string
    constraints:
    - custom_constraint: nova.keypair

  image:
    type: string
    constraints:
    - custom_constraint: glance.image

  flavor:
    type: string
    constraints:
    - custom_constraint: nova.flavor

  external_network:
    type: string
    constraints:
    - custom_constraint: neutron.network

  # TODO: uncomment when used in conjunction with other templates. 
  #fixed_network:
  #  type: string
  #  constraints:
  #  - custom_constraint: neutron.network

  #fixed_subnet:
  #  type: string
  #  constraints:
  #  - custom_constraint: neutron.subnet

  hostname:
    type: string

  #master_ip_address:
  #  type: string

  #master_hostname:
  #  type: string
  #
  #node_etc_hosts:
  #  type: string

  domain_name:
    type: string

  rhn_username:
    type: string

  rhn_password:
    type: string
    hidden: true

  rhn_pool:
    type: string
    hidden: true

  domain_name:
    type: string

  #floating_ip:
  #  type: string

  dns_nameserver: 
    type: string

  #port:
  #  description: Neutron port (with a floating IP address) to assign to the DNS Nova Server
  #  type: string

  ssh_user:
    type: string

  ipa_ds_password:
    description: Password for IPA directory server admin
    type: string

  ipa_master_password:
    description: Password for IPA master
    type: string

  ipa_admin_password:
    description: Password for admin user in IPA 
    type: string
  
  ipa_realm_name:
    description: IPA realm name 
    type: string

  ipa_domain_name:
    description: IPA domain name 
    type: string
  
  timeout:
    description: Wait condition timout 
    type: number

resources:

  # TODO: REMOVE when used in conjunction with other templates. 
  fixed_network:
    type: OS::Neutron::Net
  
  fixed_subnet:
    type: OS::Neutron::Subnet
    properties:
      cidr: 192.168.0.0/24
      network: {get_resource: fixed_network}
      dns_nameservers: {get_param: dns_nameserver}
  
  ipa_port:
    type: OS::Neutron::Port
    properties:
      security_groups:
      - {get_resource: ipa_security_group}
      network: {get_resource: fixed_network}
      fixed_ips:
      - subnet: {get_resource: fixed_subnet}
      replacement_policy: AUTO

  ipa_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
      - protocol: icmp
      - protocol: tcp
        port_range_min: 22
        port_range_max: 22
      - protocol: tcp
        port_range_min: 53
        port_range_max: 53
      - protocol: udp
        port_range_min: 53
        port_range_max: 53

  ipa_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: {get_param: external_network}
      port_id: {get_resource: ipa_port}
  
  external_router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: {get_param: external_network}

  external_router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: {get_resource: external_router}
      subnet: {get_resource: fixed_subnet}
  
  host:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: "HOST.DOMAIN"
          params:
            HOST: {get_param: hostname}
            DOMAIN: {get_param: domain_name}
      admin_user: {get_param: ssh_user}
      image: {get_param: image}
      flavor: {get_param: flavor}
      key_name: {get_param: key_name}
      networks:
      - port: {get_resource: ipa_port}
      user_data_format: SOFTWARE_CONFIG
      user_data: {get_resource: init}

  init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: {get_resource: set_hostname}
      - config: {get_resource: included_files}
      - config: {get_resource: rhn_register}
      - config: {get_resource: epel_haveged_install}
      - config: {get_resource: ipa_install}

  set_hostname:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        hostname: {get_param: hostname}
        fqdn:
          str_replace:
            template: "HOST.DOMAIN"
            params:
              HOST: {get_param: hostname}
              DOMAIN: {get_param: domain_name}

  included_files:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        write_files:
        - path: /etc/hosts
          content:
            str_replace:
              params:
                $NODE_IP: {get_resource: ipa_floating_ip}
                $NODE_HOSTNAME: {get_param: hostname}
                $NODE_DOMAIN: {get_param: domain_name}
              template: {get_file: fragments/etc-node-hosts}
        - path: /usr/bin/retry
          permissions: 0755
          content: {get_file: fragments/retry.sh}

  rhn_register:
    type: OS::Heat::SoftwareConfig
    properties:
      config:
        str_replace:
          params:
            $RHN_USERNAME: {get_param: rhn_username}
            $RHN_PASSWORD: {get_param: rhn_password}
            $POOL_ID: {get_param: rhn_pool}
          template: {get_file: fragments/rhn-register.sh}
  
  epel_haveged_install:
    type: OS::Heat::SoftwareConfig
    properties:
      config: {get_file: fragments/epel_haveged_install.sh}   

  ipa_install:
    type: OS::Heat::SoftwareConfig
    properties:
      config:
        str_replace:
          params:
            $IPA_DS_PASSWORD: {get_param: ipa_ds_password}
            $IPA_MASTER_PASSWORD: {get_param: ipa_master_password}
            $IPA_ADMIN_PASSWORD: {get_param: ipa_admin_password}
            $IPA_REALM_NAME:{get_param: ipa_realm_name}    
            $IPA_DOMAIN_NAME: {get_param: ipa_domain_name}
            $WC_NOTIFY: { get_attr: ['wait_handle', 'curl_cli'] }
          template: {get_file: fragments/ipa_install.sh}

  wait_condition:
    type: OS::Heat::WaitCondition
    properties:
      handle: {get_resource: wait_handle}
      timeout: {get_param: timeout}

  wait_handle:
    type: OS::Heat::WaitConditionHandle

### Need to put in wait controls here to wait for Master and Node deployments (or allocation of IP's) 
#   With that wait you can then have the config put in DNS entries for resources (nodes, masters, etc). 
